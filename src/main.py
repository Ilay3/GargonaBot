import ctypes
import sys
import os
import subprocess
import datetime
import uuid
import platform
import hashlib
import requests  # –î–ª—è —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
import json
import threading

from PySide6.QtCore import Qt, QTimer
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QListWidget, QStackedWidget, QPushButton, QLabel, QLineEdit, QCheckBox, QDialog, QSizePolicy, QMessageBox
)

# –°–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–π
SERVER_URL = "http://83.220.165.162:5000"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥ ‚Äì –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è main.py.
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
if os.path.isdir(os.path.join(BASE_DIR, "src")):
    PROJECT_ROOT = BASE_DIR
else:
    PROJECT_ROOT = os.path.abspath(os.path.join(BASE_DIR, ".."))

# –§–∞–π–ª –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
LICENSE_FILE = os.path.join(PROJECT_ROOT, "license.dat")
SETTINGS_FILE = os.path.join(PROJECT_ROOT, "settings.json")
print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫: {SETTINGS_FILE}")

def get_keyboard_layout():
    user32 = ctypes.WinDLL('user32', use_last_error=True)
    hwnd = user32.GetForegroundWindow()
    thread_id = user32.GetWindowThreadProcessId(hwnd, None)
    layout_id = user32.GetKeyboardLayout(thread_id)
    return layout_id & 0xFFFF

LANG_ENGLISH = 0x0409

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
def load_settings():
    if os.path.exists(SETTINGS_FILE):
        try:
            with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    return {}

def save_settings(settings):
    with open(SETTINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(settings, f, indent=4)
    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ modules
MODULES_BASE = None
if os.path.isdir(os.path.join(BASE_DIR, "modules")):
    MODULES_BASE = os.path.join(BASE_DIR, "modules")
elif os.path.isdir(os.path.join(BASE_DIR, "src", "modules")):
    MODULES_BASE = os.path.join(BASE_DIR, "src", "modules")
else:
    raise FileNotFoundError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ modules –≤ BASE_DIR –∏–ª–∏ BASE_DIR/src")

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é process_checker.
sys.path.append(os.path.join(MODULES_BASE, "ProcessChecker"))
import process_checker

# –ü—É—Ç–∏ –¥–æ —Å–∫—Ä–∏–ø—Ç–æ–≤ (–æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –µ—Å—Ç—å)
ANTIAFK_PATH     = os.path.join(MODULES_BASE, "AntiAfkService", "antiafk.py")
KRUTKAKOLES_PATH = os.path.join(MODULES_BASE, "AntiAfkService", "krutkakoles.py")
LOTTERY_PATH     = os.path.join(MODULES_BASE, "AntiAfkService", "lottery.py")
COOK_PATH        = os.path.join(MODULES_BASE, "CraftService", "cook.py")
WAXTA_PATH       = os.path.join(MODULES_BASE, "WorkService", "waxta.py")
PORT_PATH        = os.path.join(MODULES_BASE, "WorkService", "port.py")
STROYKA_PATH     = os.path.join(MODULES_BASE, "WorkService", "stroyka.py")
KOZLODOY_PATH    = os.path.join(MODULES_BASE, "WorkService", "kozlodoy.py")
AUTORUN_PATH     = os.path.join(MODULES_BASE, "OtherService", "autorun.py")
AUTOMOOD_PATH    = os.path.join(MODULES_BASE, "OtherService", "automood.py")
AUTOEAT_PATH     = os.path.join(MODULES_BASE, "OtherService", "autoeat.py")
KACHALKA_PATH    = os.path.join(MODULES_BASE, "OtherService", "kachalka.py")
KOSYAKI_PATH     = os.path.join(MODULES_BASE, "CraftService", "kosyaki.py")
TAXI_PATH        = os.path.join(MODULES_BASE, "WorkService", "Taxi.py")
FIREMAN_PATH     = os.path.join(MODULES_BASE, "WorkService", "fireman.py")
SHVEIKA_PATH     = os.path.join(MODULES_BASE, "MiniGamesService", "Shveika.py")
SKOLZKAYA_PATH   = os.path.join(MODULES_BASE, "MiniGamesService", "Skolzkaya.py")

PYTHON_EXEC = sys.executable

def get_device_id():
    return hex(uuid.getnode())

def get_hwid():
    mac = str(uuid.getnode())
    computer_name = os.environ.get('COMPUTERNAME', 'unknown')
    processor = platform.processor()
    combined = mac + computer_name + processor
    return hashlib.sha256(combined.encode()).hexdigest()

def validate_key(key: str):
    hwid = get_hwid()
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä:\n  –ö–ª—é—á: {key}\n  HWID: {hwid}")
    try:
        response = requests.post(f"{SERVER_URL}/validate", json={"key": key, "hwid": hwid})
        data = response.json()
        print(f"üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {data}")
        if response.status_code == 200:
            expiry_date_str = data.get("expiry_date")
            expiry_date = datetime.datetime.strptime(expiry_date_str, "%Y-%m-%d %H:%M:%S")
            print(f"‚úÖ –ö–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ {expiry_date}")
            return True, expiry_date
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {data.get('message', 'Unknown error')}")
            return False, None
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return False, None

def load_license():
    if os.path.exists(LICENSE_FILE):
        try:
            with open(LICENSE_FILE, "r") as f:
                license_info = json.load(f)
            stored_hwid = license_info.get("hwid")
            current_hwid = get_hwid()
            if stored_hwid != current_hwid:
                print("‚ùå HWID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è.")
                return None
            expiry_date_str = license_info.get("expiry_date")
            if expiry_date_str:
                return datetime.datetime.strptime(expiry_date_str, "%Y-%m-%d %H:%M:%S")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
    return None

def save_license(key, expiry_date):
    license_info = {
        "key": key,
        "hwid": get_hwid(),
        "expiry_date": expiry_date.strftime("%Y-%m-%d %H:%M:%S")
    }
    try:
        with open(LICENSE_FILE, "w") as f:
            json.dump(license_info, f)
        print(f"üíæ –õ–∏—Ü–µ–Ω–∑–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {expiry_date}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")

from PySide6.QtWidgets import QSizePolicy

class MainWindow(QMainWindow):
    instance = None
    def __init__(self):
        super().__init__()
        MainWindow.instance = self
        self.setWindowTitle("–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤ –±–æ—Ç–∞")
        self.setGeometry(100, 100, 900, 600)
        self.processes = {
            "antiafk": None,
            "koleso": None,
            "lottery": None,
            "cook": None,
            "waxta": None,
            "port": None,
            "stroyka": None,
            "kozlodoy": None,
            "autorun": None,
            "automood": None,
            "autoeat": None,
            "kachalka": None,
            "kosyaki": None,
            "taxi": None,
            "fireman": None,
            "shveika": None,
            "skolzkaya": None,
            "telegram_bot": None
        }

        self.start_telegram_bot_automatically()

        self.inactive_counter = 0
        self.bots_killed_due_to_inactivity = False

        self.license_expiry = load_license()

        self.license_check_timer = QTimer(self)
        self.license_check_timer.timeout.connect(self.periodic_license_check)
        self.license_check_timer.start(3600000)

        self.keyboard_timer = QTimer(self)
        self.keyboard_timer.timeout.connect(self.check_keyboard_layout)
        self.keyboard_timer.start(10000)

        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QHBoxLayout(central_widget)

        left_panel = QWidget()
        left_panel.setSizePolicy(left_panel.sizePolicy().horizontalPolicy(), QSizePolicy.Expanding)
        left_layout = QVBoxLayout(left_panel)
        self.menu_list = QListWidget()
        self.menu_list.setStyleSheet(
            "font-size: 18px;"
            "QListWidget::item:selected { background-color: #ff7043; border: 4px solid #ff7043; }"
        )
        self.menu_list.addItem("Anti-AFK")
        self.menu_list.addItem("–ö—Ä–∞—Ñ—Ç—ã")
        self.menu_list.addItem("–†–∞–±–æ—Ç—ã")
        self.menu_list.addItem("–ü–∞—Å—Å–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        self.menu_list.addItem("–°–ø–æ—Ä—Ç–∑–∞–ª")
        self.menu_list.addItem("–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã")
        self.menu_list.addItem("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.menu_list.addItem("–¢–µ–ª–µ–≥—Ä–∞–º–º")
        self.menu_list.currentRowChanged.connect(self.switch_page)
        left_layout.addWidget(self.menu_list)

        self.license_label = QLabel()
        self.license_label.setStyleSheet("font-size: 14px; color: #ff7043;")
        left_layout.addWidget(self.license_label)
        left_layout.setAlignment(self.license_label, Qt.AlignBottom)
        main_layout.addWidget(left_panel, 1)

        self.pages = QStackedWidget()
        self.page_antiafk = self.create_antiafk_page()
        self.page_cook = self.create_cook_page()
        self.page_work = self.create_work_page()
        self.page_automood = self.create_automood_page()
        self.page_sportzal = self.create_sportzal_page()
        self.page_contracts = self.create_contracts_page()
        self.page_settings = self.create_settings_page()
        self.tg_page = self.create_tg_page()
        self.pages.addWidget(self.page_antiafk)
        self.pages.addWidget(self.page_cook)
        self.pages.addWidget(self.page_work)
        self.pages.addWidget(self.page_automood)
        self.pages.addWidget(self.page_sportzal)
        self.pages.addWidget(self.page_contracts)
        self.pages.addWidget(self.page_settings)
        self.pages.addWidget(self.tg_page)
        main_layout.addWidget(self.pages, 3)
        self.switch_page(0)

        self.game_timer = QTimer(self)
        self.game_timer.timeout.connect(self.check_game_active)
        self.game_timer.start(1000)

        self.license_timer = QTimer(self)
        self.license_timer.timeout.connect(self.update_license_label)
        self.license_timer.start(1000)

    def telegram_toggle_antiafk(self):
        self.toggle_antiafk()

    def check_keyboard_layout(self):
        if get_keyboard_layout() != LANG_ENGLISH:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ!",
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫—É—é, –Ω–∞—à –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –Ω–µ–π!")

    def periodic_license_check(self):
        if self.license_expiry:
            now = datetime.datetime.now()
            if now >= self.license_expiry:
                print("‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
                error_dialog = QDialog(self)
                error_dialog.setWindowTitle("–û—à–∏–±–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏")
                dlg_layout = QVBoxLayout(error_dialog)
                msg_label = QLabel("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏—Å—Ç–µ–∫. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ.")
                msg_label.setAlignment(Qt.AlignCenter)
                dlg_layout.addWidget(msg_label)
                error_dialog.exec()
                QApplication.quit()

    def update_license_label(self):
        if self.license_expiry:
            now = datetime.datetime.now()
            remaining = self.license_expiry - now
            if remaining.total_seconds() <= 0:
                self.license_label.setText("–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞")
            else:
                self.license_label.setText("–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: " + self.license_expiry.strftime("%Y-%m-%d %H:%M"))
        else:
            self.license_label.setText("–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")

    def switch_page(self, index):
        self.pages.setCurrentIndex(index)

    def create_antiafk_page(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        title = QLabel("Anti-AFK")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("font-size: 20px;")
        layout.addWidget(title)
        self.antiafk_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å Anti-AFK")
        self.antiafk_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.antiafk_button.clicked.connect(self.toggle_antiafk)
        layout.addWidget(self.antiafk_button)
        self.chk_koleso = QCheckBox("–ö–æ–ª–µ—Å–æ-–£–¥–∞—á–∏")
        self.chk_koleso.setStyleSheet("""
            QCheckBox::indicator { width: 15px; height: 15px; }
            QCheckBox::indicator:unchecked { background-color: #bdbdbd; border: 2px solid #757575; border-radius: 7px; }
            QCheckBox::indicator:checked { background-color: #ff7043; border: 2px solid #ffa726; border-radius: 7px; }
            QCheckBox { font-size: 16px; }
        """)
        self.chk_koleso.toggled.connect(self.toggle_koleso)
        layout.addWidget(self.chk_koleso)
        self.chk_lottery = QCheckBox("–õ–æ—Ç–µ—Ä–µ—è")
        self.chk_lottery.setStyleSheet("""
            QCheckBox::indicator { width: 15px; height: 15px; }
            QCheckBox::indicator:unchecked { background-color: #bdbdbd; border: 2px solid #757575; border-radius: 7px; }
            QCheckBox::indicator:checked { background-color: #ff7043; border: 2px solid #ffa726; border-radius: 7px; }
            QCheckBox { font-size: 16px; }
        """)
        self.chk_lottery.toggled.connect(self.toggle_lottery)
        layout.addWidget(self.chk_lottery)
        layout.addStretch()
        return widget

    def create_cook_page(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        title = QLabel("–ö—Ä–∞—Ñ—Ç—ã")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("font-size: 20px;")
        layout.addWidget(title)
        cook_header = QLabel("–°–æ–∑–¥–∞–Ω–∏–µ –ë–ª—é–¥")
        cook_header.setAlignment(Qt.AlignCenter)
        cook_header.setStyleSheet("font-size: 20px; margin-top: 20px;")
        layout.addWidget(cook_header)
        cook_desc = QLabel("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –±–ª—é–¥.")
        cook_desc.setAlignment(Qt.AlignCenter)
        cook_desc.setWordWrap(True)
        cook_desc.setStyleSheet("font-size: 16px; color: #555555;")
        layout.addWidget(cook_desc)
        self.cook_error_label = QLabel("")
        self.cook_error_label.setStyleSheet("color: #ff7043; font-size: 16px;")
        layout.addWidget(self.cook_error_label)
        form_layout = QHBoxLayout()
        form_label = QLabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥:")
        form_label.setStyleSheet("font-size: 16px;")
        self.cook_input = QLineEdit()
        self.cook_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        self.cook_input.setStyleSheet("font-size: 16px; padding: 5px;")
        form_layout.addWidget(form_label)
        form_layout.addWidget(self.cook_input)
        layout.addLayout(form_layout)
        self.cook_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å")
        self.cook_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.cook_button.clicked.connect(self.toggle_cook)
        layout.addWidget(self.cook_button)
        kosyaki_header = QLabel("–°–æ–∑–¥–∞–Ω–∏–µ –ö–æ—Å—è–∫–æ–≤")
        kosyaki_header.setAlignment(Qt.AlignCenter)
        kosyaki_header.setStyleSheet("font-size: 20px; margin-top: 20px;")
        layout.addWidget(kosyaki_header)
        kosyaki_desc = QLabel("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ—Å—è–∫–æ–≤.")
        kosyaki_desc.setAlignment(Qt.AlignCenter)
        kosyaki_desc.setWordWrap(True)
        kosyaki_desc.setStyleSheet("font-size: 16px; color: #555555;")
        layout.addWidget(kosyaki_desc)
        self.kosyaki_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ö–æ—Å—é–∫–∏")
        self.kosyaki_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.kosyaki_button.clicked.connect(self.toggle_kosyaki)
        layout.addWidget(self.kosyaki_button)
        layout.addStretch()
        return widget

    def create_work_page(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        title = QLabel("Work Service")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("font-size: 20px;")
        layout.addWidget(title)
        self.waxta_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –®–∞—Ö—Ç–µ")
        self.waxta_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.waxta_button.clicked.connect(self.toggle_waxta)
        layout.addWidget(self.waxta_button)
        self.port_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ –ü–æ—Ä—Ç—É")
        self.port_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.port_button.clicked.connect(self.toggle_port)
        layout.addWidget(self.port_button)
        self.stroyka_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –°—Ç—Ä–æ–π–∫–µ")
        self.stroyka_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.stroyka_button.clicked.connect(self.toggle_stroyka)
        layout.addWidget(self.stroyka_button)
        self.kozlodoy_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –§–µ—Ä–º–µ")
        self.kozlodoy_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.kozlodoy_button.clicked.connect(self.toggle_kozlodoy)
        layout.addWidget(self.kozlodoy_button)
        self.taxi_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ –¢–∞–∫—Å–∏")
        self.taxi_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.taxi_button.clicked.connect(self.toggle_taxi)
        layout.addWidget(self.taxi_button)
        self.fireman_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –ü–æ–∂–∞—Ä–Ω—ã–º")
        self.fireman_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.fireman_button.clicked.connect(self.toggle_fireman)
        layout.addWidget(self.fireman_button)
        self.chk_autorun = QCheckBox("–ê–≤—Ç–æ-–ë–µ–≥")
        self.chk_autorun.setStyleSheet("""
            QCheckBox::indicator { width: 15px; height: 15px; }
            QCheckBox::indicator:unchecked { background-color: #bdbdbd; border: 2px solid #757575; border-radius: 7px; }
            QCheckBox::indicator:checked { background-color: #ff7043; border: 2px solid #ffa726; border-radius: 7px; }
            QCheckBox { font-size: 16px; }
        """)
        self.chk_autorun.toggled.connect(self.toggle_autorun)
        layout.addWidget(self.chk_autorun)
        self.work_hint_label = QLabel("")
        self.work_hint_label.setStyleSheet("font-size: 16px; color: #ff7043;")
        layout.addWidget(self.work_hint_label)
        layout.addStretch()
        return widget

    def create_contracts_page(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        title = QLabel("–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("font-size: 20px;")
        layout.addWidget(title)
        desc = QLabel("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤.")
        desc.setAlignment(Qt.AlignCenter)
        desc.setWordWrap(True)
        desc.setStyleSheet("font-size: 16px;")
        layout.addWidget(desc)
        self.shveika_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –®–≤–µ–π–Ω—É—é —Ñ–∞–±—Ä–∏–∫—É")
        self.shveika_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.shveika_button.clicked.connect(self.toggle_shveika)
        layout.addWidget(self.shveika_button)
        self.skolzkaya_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –°—Ö–µ–º—ã")
        self.skolzkaya_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.skolzkaya_button.clicked.connect(self.toggle_skolzkaya)
        layout.addWidget(self.skolzkaya_button)
        layout.addStretch()
        return widget

    def create_automood_page(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        title = QLabel("–ü–∞—Å—Å–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("font-size: 20px;")
        layout.addWidget(title)
        automood_instr = QLabel("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –ê–≤—Ç–æ-–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.")
        automood_instr.setAlignment(Qt.AlignCenter)
        layout.addWidget(automood_instr)
        automood_label = QLabel("–ö–ª–∞–≤–∏—à–∞ –ê–≤—Ç–æ-–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:")
        automood_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(automood_label)
        self.automood_key_input = QLineEdit()
        self.automood_key_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞–≤–∏—à—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: L (—Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ Eng - —Ä–∞—Å–∫–ª–∞–¥–∫–∞)")
        self.automood_key_input.setStyleSheet("font-size: 16px; padding: 5px;")
        layout.addWidget(self.automood_key_input)
        self.automood_launch_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ê–≤—Ç–æ-–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
        self.automood_launch_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.automood_launch_button.clicked.connect(self.toggle_automood)
        layout.addWidget(self.automood_launch_button)
        autorun_instr = QLabel("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –ê–≤—Ç–æ-–ë–µ–≥ (—ç–º—É–ª—è—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –±–µ–≥–∞).")
        autorun_instr.setAlignment(Qt.AlignCenter)
        layout.addWidget(autorun_instr)
        autorun_label = QLabel("–ö–ª–∞–≤–∏—à–∞ –ê–≤—Ç–æ-–ë–µ–≥:")
        autorun_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(autorun_label)
        self.autorun_key_input = QLineEdit()
        self.autorun_key_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞–≤–∏—à—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: J (—Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ Eng - —Ä–∞—Å–∫–ª–∞–¥–∫–∞)")
        self.autorun_key_input.setStyleSheet("font-size: 16px; padding: 5px;")
        layout.addWidget(self.autorun_key_input)
        self.autorun_launch_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ê–≤—Ç–æ-–ë–µ–≥")
        self.autorun_launch_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.autorun_launch_button.clicked.connect(self.toggle_autorun)
        layout.addWidget(self.autorun_launch_button)
        autoeat_instr = QLabel("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –ê–≤—Ç–æ-–ï–¥–∞ (—ç–º—É–ª—è—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏—à–∏ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –µ–¥—ã).")
        autoeat_instr.setAlignment(Qt.AlignCenter)
        layout.addWidget(autoeat_instr)
        autoeat_label = QLabel("–ö–ª–∞–≤–∏—à–∞ –ê–≤—Ç–æ-–ï–¥–∞:")
        autoeat_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(autoeat_label)
        self.autoeat_key_input = QLineEdit()
        self.autoeat_key_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞–≤–∏—à—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: H (—Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ Eng - —Ä–∞—Å–∫–ª–∞–¥–∫–∞)")
        self.autoeat_key_input.setStyleSheet("font-size: 16px; padding: 5px;")
        layout.addWidget(self.autoeat_key_input)
        self.autoeat_launch_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ê–≤—Ç–æ-–ï–¥–∞")
        self.autoeat_launch_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.autoeat_launch_button.clicked.connect(self.toggle_autoeat)
        layout.addWidget(self.autoeat_launch_button)
        settings = load_settings()
        self.automood_key_input.setText(settings.get("automood_key", "l"))
        self.autorun_key_input.setText(settings.get("autorun_key", "+"))
        self.autoeat_key_input.setText(settings.get("autoeat_key", "o"))
        layout.addStretch()
        self.passive_save_button = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.passive_save_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.passive_save_button.clicked.connect(self.save_passive_settings)
        layout.addWidget(self.passive_save_button)
        return widget

    def create_sportzal_page(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        title = QLabel("–°–ø–æ—Ä—Ç–∑–∞–ª")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("font-size: 20px;")
        layout.addWidget(title)
        desc = QLabel("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º—ã—à—Ü. –§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —ç–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª–µ.")
        desc.setAlignment(Qt.AlignCenter)
        desc.setWordWrap(True)
        desc.setStyleSheet("font-size: 16px;")
        layout.addWidget(desc)
        self.kachalka_launch_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª–µ")
        self.kachalka_launch_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.kachalka_launch_button.clicked.connect(self.toggle_kachalka)
        layout.addWidget(self.kachalka_launch_button)
        layout.addStretch()
        return widget

    def create_settings_page(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        title = QLabel("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("font-size: 20px;")
        layout.addWidget(title)
        desc = QLabel("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ Rage MP (exe), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è.")
        desc.setAlignment(Qt.AlignCenter)
        desc.setWordWrap(True)
        desc.setStyleSheet("font-size: 16px;")
        layout.addWidget(desc)
        path_label = QLabel("–ü—É—Ç—å –¥–æ Rage MP:")
        path_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(path_label)
        self.rage_mp_path_input = QLineEdit()
        self.rage_mp_path_input.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: C:\\Program Files\\RageMP\\RageMP.exe")
        self.rage_mp_path_input.setStyleSheet("font-size: 16px; padding: 5px;")
        layout.addWidget(self.rage_mp_path_input)
        settings = load_settings()
        current_path = settings.get("rage_mp_path", "")
        self.rage_mp_path_input.setText(current_path)
        self.launch_game_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É")
        self.launch_game_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.launch_game_button.clicked.connect(self.toggle_launch_game)
        layout.addWidget(self.launch_game_button)
        self.settings_save_button = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.settings_save_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.settings_save_button.clicked.connect(self.save_settings_page)
        layout.addWidget(self.settings_save_button)
        layout.addStretch()
        return widget

    def create_tg_page(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        title = QLabel("Telegram")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("font-size: 20px;")
        layout.addWidget(title)
        desc = QLabel("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞ –∏ Chat ID, –∑–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞–Ω—ã, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        desc.setAlignment(Qt.AlignCenter)
        desc.setWordWrap(True)
        desc.setStyleSheet("font-size: 16px;")
        layout.addWidget(desc)
        token_label = QLabel("Telegram Bot Token:")
        token_label.setAlignment(Qt.AlignCenter)
        token_label.setStyleSheet("font-size: 16px;")
        layout.addWidget(token_label)
        self.telegram_token_input = QLineEdit()
        self.telegram_token_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω")
        self.telegram_token_input.setStyleSheet("font-size: 16px; padding: 5px;")
        layout.addWidget(self.telegram_token_input)
        chat_id_label = QLabel("Telegram Chat ID:")
        chat_id_label.setAlignment(Qt.AlignCenter)
        chat_id_label.setStyleSheet("font-size: 16px;")
        layout.addWidget(chat_id_label)
        self.telegram_chat_id_input = QLineEdit()
        self.telegram_chat_id_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ Chat ID")
        self.telegram_chat_id_input.setStyleSheet("font-size: 16px; padding: 5px;")
        layout.addWidget(self.telegram_chat_id_input)
        settings = load_settings()
        self.telegram_token_input.setText(settings.get("telegram_token", ""))
        self.telegram_chat_id_input.setText(settings.get("telegram_chat_id", ""))
        self.tg_save_button = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.tg_save_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.tg_save_button.clicked.connect(self.save_tg_settings)
        layout.addWidget(self.tg_save_button)
        layout.addStretch()
        return widget

    def save_tg_settings(self):
        token = self.telegram_token_input.text().strip()
        chat_id = self.telegram_chat_id_input.text().strip()
        if token and chat_id:
            settings = load_settings()
            settings["telegram_token"] = token
            settings["telegram_chat_id"] = chat_id
            save_settings(settings)
            QMessageBox.information(self, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                                    f"Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\nToken: {token}\nChat ID: {chat_id}")
        else:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –∏ Chat ID")

    def save_passive_settings(self):
        automood_key = self.automood_key_input.text().strip()
        autorun_key = self.autorun_key_input.text().strip()
        autoeat_key = self.autoeat_key_input.text().strip()
        if automood_key and autorun_key and autoeat_key:
            settings = load_settings()
            settings["automood_key"] = automood_key
            settings["autorun_key"] = autorun_key
            settings["autoeat_key"] = autoeat_key
            save_settings(settings)
            self.work_hint_label.setText(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: Automood = {automood_key}, Autorun = {autorun_key}, Autoeat = {autoeat_key}")
        else:
            self.work_hint_label.setText("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏")

    def toggle_kosyaki(self):
        if self.processes.get("kosyaki") is None:
            wd = os.path.dirname(KOSYAKI_PATH)
            try:
                proc = subprocess.Popen([PYTHON_EXEC, KOSYAKI_PATH], cwd=wd)
                self.processes["kosyaki"] = proc
                self.kosyaki_button.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ö–æ—Å—è–∫–æ–≤")
                self.kosyaki_button.setStyleSheet("font-size: 16px; padding: 10px; background-color: #ff7043; color: white;")
                print("–°–∫—Ä–∏–ø—Ç kosyaki –∑–∞–ø—É—â–µ–Ω, PID:", proc.pid)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ kosyaki:", e)
        else:
            try:
                self.processes["kosyaki"].terminate()
                self.processes["kosyaki"].wait()
                self.processes["kosyaki"] = None
                self.kosyaki_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ö–æ—Å—è–∫–æ–≤")
                self.kosyaki_button.setStyleSheet("font-size: 16px; padding: 10px;")
                print("–°–∫—Ä–∏–ø—Ç kosyaki –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ kosyaki:", e)

    def toggle_automood(self):
        if self.processes.get("automood") is None:
            wd = os.path.dirname(AUTOMOOD_PATH)
            try:
                proc = subprocess.Popen([PYTHON_EXEC, AUTOMOOD_PATH], cwd=wd)
                self.processes["automood"] = proc
                self.automood_launch_button.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ê–≤—Ç–æ-–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
                self.automood_launch_button.setStyleSheet("font-size: 16px; padding: 10px; background-color: #ff7043; color: white;")
                print("Automood –∑–∞–ø—É—â–µ–Ω, PID:", proc.pid)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Automood:", e)
        else:
            try:
                self.processes["automood"].terminate()
                self.processes["automood"].wait()
                self.processes["automood"] = None
                self.automood_launch_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ê–≤—Ç–æ-–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
                self.automood_launch_button.setStyleSheet("font-size: 16px; padding: 10px;")
                print("Automood –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Automood:", e)

    def toggle_autorun(self):
        if self.processes.get("autorun") is None:
            wd = os.path.dirname(AUTORUN_PATH)
            try:
                proc = subprocess.Popen([PYTHON_EXEC, AUTORUN_PATH], cwd=wd)
                self.processes["autorun"] = proc
                self.autorun_launch_button.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ê–≤—Ç–æ-–ë–µ–≥")
                self.autorun_launch_button.setStyleSheet("font-size: 16px; padding: 10px; background-color: #ff7043; color: white;")
                print("Autorun –∑–∞–ø—É—â–µ–Ω, PID:", proc.pid)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Autorun:", e)
        else:
            try:
                self.processes["autorun"].terminate()
                self.processes["autorun"].wait()
                self.processes["autorun"] = None
                self.autorun_launch_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ê–≤—Ç–æ-–ë–µ–≥")
                self.autorun_launch_button.setStyleSheet("font-size: 16px; padding: 10px;")
                print("Autorun –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Autorun:", e)

    def toggle_autoeat(self):
        if self.processes.get("autoeat") is None:
            wd = os.path.dirname(AUTOEAT_PATH)
            try:
                proc = subprocess.Popen([PYTHON_EXEC, AUTOEAT_PATH], cwd=wd)
                self.processes["autoeat"] = proc
                self.autoeat_launch_button.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ê–≤—Ç–æ-–ï–¥–∞")
                self.autoeat_launch_button.setStyleSheet("font-size: 16px; padding: 10px; background-color: #ff7043; color: white;")
                print("Autoeat –∑–∞–ø—É—â–µ–Ω, PID:", proc.pid)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Autoeat:", e)
        else:
            try:
                self.processes["autoeat"].terminate()
                self.processes["autoeat"].wait()
                self.processes["autoeat"] = None
                self.autoeat_launch_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ê–≤—Ç–æ-–ï–¥–∞")
                self.autoeat_launch_button.setStyleSheet("font-size: 16px; padding: 10px;")
                print("Autoeat –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Autoeat:", e)

    def toggle_antiafk(self):
        if self.processes["antiafk"] is None:
            self.processes["antiafk"] = subprocess.Popen([PYTHON_EXEC, ANTIAFK_PATH], cwd=PROJECT_ROOT)
            self.antiafk_button.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Anti-AFK")
            self.antiafk_button.setStyleSheet("font-size: 16px; padding: 10px; background-color: #ff7043; color: white;")
        else:
            self.processes["antiafk"].terminate()
            self.processes["antiafk"].wait()
            self.processes["antiafk"] = None
            self.antiafk_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å Anti-AFK")
            self.antiafk_button.setStyleSheet("font-size: 16px; padding: 10px;")

    def toggle_koleso(self, checked):
        print("toggle_koleso toggled:", checked)
        if checked:
            wd = os.path.dirname(KRUTKAKOLES_PATH)
            try:
                proc = subprocess.Popen([PYTHON_EXEC, KRUTKAKOLES_PATH], cwd=wd)
                self.processes["koleso"] = proc
                print("–ö—Ä—É—Ç–∫–∞ –∫–æ–ª–µ—Å–∞ –∑–∞–ø—É—â–µ–Ω–∞, PID:", proc.pid)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ö—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–∞:", e)
        else:
            if self.processes.get("koleso") is not None:
                try:
                    self.processes["koleso"].terminate()
                    self.processes["koleso"].wait()
                    print("–ö—Ä—É—Ç–∫–∞ –∫–æ–ª–µ—Å–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                except Exception as e:
                    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ö—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–∞:", e)
                self.processes["koleso"] = None

    def toggle_lottery(self, checked):
        print("toggle_lottery toggled:", checked)
        if checked:
            wd = os.path.dirname(LOTTERY_PATH)
            try:
                proc = subprocess.Popen([PYTHON_EXEC, LOTTERY_PATH], cwd=wd)
                self.processes["lottery"] = proc
                print("–õ–æ—Ç–µ—Ä–µ—è –∑–∞–ø—É—â–µ–Ω–∞, PID:", proc.pid)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –õ–æ—Ç–µ—Ä–µ–∏:", e)
        else:
            if self.processes.get("lottery") is not None:
                try:
                    self.processes["lottery"].terminate()
                    self.processes["lottery"].wait()
                    print("–õ–æ—Ç–µ—Ä–µ—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                except Exception as e:
                    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –õ–æ—Ç–µ—Ä–µ–∏:", e)
                self.processes["lottery"] = None

    def toggle_cook(self):
        if self.processes["cook"] is None:
            try:
                dish_count = int(self.cook_input.text())
                self.cook_error_label.setText("")
            except ValueError:
                self.cook_error_label.setText("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
                return
            self.processes["cook"] = subprocess.Popen([PYTHON_EXEC, COOK_PATH, str(dish_count)], cwd=PROJECT_ROOT)
            self.cook_button.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
            self.cook_button.setStyleSheet("font-size: 16px; padding: 10px; background-color: #ff7043; color: white;")
        else:
            self.processes["cook"].terminate()
            self.processes["cook"].wait()
            self.processes["cook"] = None
            self.cook_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å")
            self.cook_button.setStyleSheet("font-size: 16px; padding: 10px;")

    def toggle_waxta(self):
        if self.processes["waxta"] is None:
            wd = os.path.dirname(WAXTA_PATH)
            try:
                proc = subprocess.Popen([PYTHON_EXEC, WAXTA_PATH], cwd=wd)
                self.processes["waxta"] = proc
                self.waxta_button.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –®–∞—Ö—Ç–µ")
                self.waxta_button.setStyleSheet("font-size: 16px; padding: 10px; background-color: #ff7043; color: white;")
                print("Waxta –∑–∞–ø—É—â–µ–Ω–∞, PID:", proc.pid)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –®–∞—Ö—Ç—ã:", e)
        else:
            try:
                self.processes["waxta"].terminate()
                self.processes["waxta"].wait()
                self.processes["waxta"] = None
                self.waxta_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –®–∞—Ö—Ç–µ")
                self.waxta_button.setStyleSheet("font-size: 16px; padding: 10px;")
                print("–®–∞—Ö—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –®–∞—Ö—Ç—ã:", e)

    def toggle_port(self):
        if self.processes["port"] is None:
            wd = os.path.dirname(PORT_PATH)
            try:
                proc = subprocess.Popen([PYTHON_EXEC, PORT_PATH], cwd=wd)
                self.processes["port"] = proc
                self.port_button.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ –ü–æ—Ä—Ç—É")
                self.port_button.setStyleSheet("font-size: 16px; padding: 10px; background-color: #ff7043; color: white;")
                print("Port –∑–∞–ø—É—â–µ–Ω–∞, PID:", proc.pid)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Port:", e)
        else:
            try:
                self.processes["port"].terminate()
                self.processes["port"].wait()
                self.processes["port"] = None
                self.port_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ –ü–æ—Ä—Ç—É")
                self.port_button.setStyleSheet("font-size: 16px; padding: 10px;")
                print("Port –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Port:", e)

    def toggle_stroyka(self):
        if self.processes["stroyka"] is None:
            wd = os.path.dirname(STROYKA_PATH)
            try:
                proc = subprocess.Popen([PYTHON_EXEC, STROYKA_PATH], cwd=wd)
                self.processes["stroyka"] = proc
                self.stroyka_button.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –°—Ç—Ä–æ–π–∫–µ")
                self.stroyka_button.setStyleSheet("font-size: 16px; padding: 10px; background-color: #ff7043; color: white;")
                print("–°—Ç—Ä–æ–π–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞, PID:", proc.pid)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –°—Ç—Ä–æ–π–∫–∏:", e)
        else:
            try:
                self.processes["stroyka"].terminate()
                self.processes["stroyka"].wait()
                self.processes["stroyka"] = None
                self.stroyka_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –°—Ç—Ä–æ–π–∫–µ")
                self.stroyka_button.setStyleSheet("font-size: 16px; padding: 10px;")
                print("–°—Ç—Ä–æ–π–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –°—Ç—Ä–æ–π–∫–∏:", e)

    def toggle_kozlodoy(self):
        if self.processes["kozlodoy"] is None:
            wd = os.path.dirname(KOZLODOY_PATH)
            try:
                proc = subprocess.Popen([PYTHON_EXEC, KOZLODOY_PATH], cwd=wd)
                self.processes["kozlodoy"] = proc
                self.kozlodoy_button.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –§–µ—Ä–º–µ")
                self.kozlodoy_button.setStyleSheet("font-size: 16px; padding: 10px; background-color: #ff7043; color: white;")
                print("–†–∞–±–æ—Ç–∞ –Ω–∞ –§–µ—Ä–º–µ –∑–∞–ø—É—â–µ–Ω–∞, PID:", proc.pid)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ –§–µ—Ä–º–µ:", e)
        else:
            try:
                self.processes["kozlodoy"].terminate()
                self.processes["kozlodoy"].wait()
                self.processes["kozlodoy"] = None
                self.kozlodoy_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –§–µ—Ä–º–µ")
                self.kozlodoy_button.setStyleSheet("font-size: 16px; padding: 10px;")
                print("–†–∞–±–æ—Ç–∞ –Ω–∞ –§–µ—Ä–º–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ –§–µ—Ä–º–µ:", e)

    def toggle_taxi(self):
        if self.processes.get("taxi") is None:
            wd = os.path.dirname(TAXI_PATH)
            try:
                proc = subprocess.Popen([PYTHON_EXEC, TAXI_PATH], cwd=wd)
                self.processes["taxi"] = proc
                self.taxi_button.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –¢–∞–∫—Å–∏—Å—Ç–æ–º")
                self.taxi_button.setStyleSheet("font-size: 16px; padding: 10px; background-color: #ff7043; color: white;")
                print("Taxi –∑–∞–ø—É—â–µ–Ω, PID:", proc.pid)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Taxi:", e)
        else:
            try:
                self.processes["taxi"].terminate()
                self.processes["taxi"].wait()
                self.processes["taxi"] = None
                self.taxi_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –¢–∞–∫—Å–∏—Å—Ç–æ–º")
                self.taxi_button.setStyleSheet("font-size: 16px; padding: 10px;")
                print("Taxi –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Taxi:", e)

    def toggle_fireman(self):
        if self.processes.get("fireman") is None:
            wd = os.path.dirname(FIREMAN_PATH)
            try:
                proc = subprocess.Popen([PYTHON_EXEC, FIREMAN_PATH], cwd=wd)
                self.processes["fireman"] = proc
                self.fireman_button.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ü–æ–∂–∞—Ä–Ω—ã–º")
                self.fireman_button.setStyleSheet("font-size: 16px; padding: 10px; background-color: #ff7043; color: white;")
                print("Fireman –∑–∞–ø—É—â–µ–Ω, PID:", proc.pid)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Fireman:", e)
        else:
            try:
                self.processes["fireman"].terminate()
                self.processes["fireman"].wait()
                self.processes["fireman"] = None
                self.fireman_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –ü–æ–∂–∞—Ä–Ω—ã–º")
                self.fireman_button.setStyleSheet("font-size: 16px; padding: 10px;")
                print("Fireman –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Fireman:", e)

    def toggle_kachalka(self):
        if self.processes.get("kachalka") is None:
            wd = os.path.dirname(KACHALKA_PATH)
            try:
                proc = subprocess.Popen([PYTHON_EXEC, KACHALKA_PATH], cwd=wd)
                self.processes["kachalka"] = proc
                self.kachalka_launch_button.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –°–ø–æ—Ä—Ç–∑–∞–ª")
                self.kachalka_launch_button.setStyleSheet("font-size: 16px; padding: 10px; background-color: #ff7043; color: white;")
                print("–°–ø–æ—Ä—Ç–∑–∞–ª –∑–∞–ø—É—â–µ–Ω (kachalka), PID:", proc.pid)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –°–ø–æ—Ä—Ç–∑–∞–ª–∞ (kachalka):", e)
        else:
            try:
                self.processes["kachalka"].terminate()
                self.processes["kachalka"].wait()
                self.processes["kachalka"] = None
                self.kachalka_launch_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å –°–ø–æ—Ä—Ç–∑–∞–ª")
                self.kachalka_launch_button.setStyleSheet("font-size: 16px; padding: 10px;")
                print("–°–ø–æ—Ä—Ç–∑–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –°–ø–æ—Ä—Ç–∑–∞–ª–∞ (kachalka):", e)

    def toggle_shveika(self):
        if self.processes.get("shveika") is None:
            wd = os.path.dirname(SHVEIKA_PATH)
            try:
                proc = subprocess.Popen([PYTHON_EXEC, SHVEIKA_PATH], cwd=wd)
                self.processes["shveika"] = proc
                self.shveika_button.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—à–∏–≤ –û–¥–µ–∂–¥—ã")
                self.shveika_button.setStyleSheet("font-size: 16px; padding: 10px; background-color: #ff7043; color: white;")
                print("Shveika –∑–∞–ø—É—â–µ–Ω, PID:", proc.pid)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Shveika:", e)
        else:
            try:
                self.processes["shveika"].terminate()
                self.processes["shveika"].wait()
                self.processes["shveika"] = None
                self.shveika_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—à–∏–≤ –û–¥–µ–∂–¥—ã")
                self.shveika_button.setStyleSheet("font-size: 16px; padding: 10px;")
                print("Shveika –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Shveika:", e)

    def toggle_skolzkaya(self):
        if self.processes.get("skolzkaya") is None:
            wd = os.path.dirname(SKOLZKAYA_PATH)
            try:
                proc = subprocess.Popen([PYTHON_EXEC, SKOLZKAYA_PATH], cwd=wd)
                self.processes["skolzkaya"] = proc
                self.skolzkaya_button.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –°—Ö–µ–º—ã")
                self.skolzkaya_button.setStyleSheet("font-size: 16px; padding: 10px; background-color: #ff7043; color: white;")
                print("Skolzkaya –∑–∞–ø—É—â–µ–Ω, PID:", proc.pid)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Skolzkaya:", e)
        else:
            try:
                self.processes["skolzkaya"].terminate()
                self.processes["skolzkaya"].wait()
                self.processes["skolzkaya"] = None
                self.skolzkaya_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å –°—Ö–µ–º—ã")
                self.skolzkaya_button.setStyleSheet("font-size: 16px; padding: 10px;")
                print("Skolzkaya –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Skolzkaya:", e)

    def check_game_active(self):
        if process_checker.is_game_active():
            self.inactive_counter = 0
            self.bots_killed_due_to_inactivity = False
        else:
            self.inactive_counter += 1
            if self.inactive_counter >= 180 and not self.bots_killed_due_to_inactivity:
                print("–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ 3 –º–∏–Ω—É—Ç—ã. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤.")
                self.kill_all_bots()
                self.bots_killed_due_to_inactivity = True

    def save_settings_page(self):
        rage_mp_path = self.rage_mp_path_input.text().strip()
        if rage_mp_path:
            settings = load_settings()
            settings["rage_mp_path"] = rage_mp_path
            save_settings(settings)
            self.work_hint_label.setText(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: Rage MP = {rage_mp_path}")
        else:
            self.work_hint_label.setText("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –¥–æ Rage MP")

    def toggle_launch_game(self):
        shortcut_path = self.rage_mp_path_input.text().strip()
        if not shortcut_path:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–æ —è—Ä–ª—ã–∫–∞ Rage MP!")
            return
        if not os.path.exists(shortcut_path) or not shortcut_path.lower().endswith(".lnk"):
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞! –£–∫–∞–∂–∏—Ç–µ —è—Ä–ª—ã–∫ (.lnk).")
            return
        try:
            os.startfile(shortcut_path, "runas")
            print("–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ —è—Ä–ª—ã–∫.")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É: {e}")

    def start_telegram_bot_automatically(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤–∫–ª—é—á–∞—è —Ç–æ–∫–µ–Ω –∏ chat id) –∏–∑ settings.json
        settings = load_settings()
        token = settings.get("telegram_token", "")
        chat_id = settings.get("telegram_chat_id", "")
        if token and chat_id:
            try:
                telegram_bot_path = os.path.join(MODULES_BASE, "TelegramService", "telegram_bot.py")
                if os.path.exists(telegram_bot_path):
                    wd = os.path.dirname(telegram_bot_path)
                    proc = subprocess.Popen([PYTHON_EXEC, telegram_bot_path, token], cwd=wd)
                    self.processes["telegram_bot"] = proc
                    print("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω, PID:", proc.pid)
                else:
                    print("telegram_bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞.")
                url = f"https://api.telegram.org/bot{token}/sendMessage"
                payload = {"chat_id": chat_id, "text": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω."}
                response = requests.post(url, data=payload)
                if response.status_code == 200:
                    print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
                else:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–ø—É—Å–∫–µ Telegram –±–æ—Ç–∞: {e}")

    def kill_all_bots(self):
        for key in self.processes:
            proc = self.processes[key]
            if proc is not None:
                try:
                    proc.terminate()
                    proc.wait()
                    print(f"{key} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ {key}: {e}")
                self.processes[key] = None
        self.antiafk_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å Anti-AFK")
        self.antiafk_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.cook_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å")
        self.cook_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.waxta_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –®–∞—Ö—Ç–µ")
        self.waxta_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.port_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ –ü–æ—Ä—Ç—É")
        self.port_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.stroyka_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –°—Ç—Ä–æ–π–∫–µ")
        self.stroyka_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.kozlodoy_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ö–æ–∑–ª–æ–¥–æ–π")
        self.kozlodoy_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.chk_koleso.setChecked(False)
        self.chk_lottery.setChecked(False)
        if hasattr(self, 'chk_autorun'):
            self.chk_autorun.setChecked(False)
        self.work_hint_label.setText("")

from flask import Flask, request

api_app = Flask(__name__)

@api_app.route('/antiafk', methods=['POST'])
def antiafk_endpoint():
    from datetime import datetime
    if MainWindow.instance and MainWindow.instance.license_expiry and MainWindow.instance.license_expiry > datetime.now():
        MainWindow.instance.toggle_antiafk()
        return "Anti-AFK –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω", 200
    return "–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ", 403

@api_app.route('/cook', methods=['POST'])
def cook_endpoint():
    if MainWindow.instance:
        dish_count = request.form.get('dish_count', '1')
        try:
            int(dish_count)
        except ValueError:
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–ª—é–¥", 400
        MainWindow.instance.cook_input.setText(dish_count)
        MainWindow.instance.toggle_cook()
        return "–ö—Ä–∞—Ñ—Ç—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—ã", 200
    return "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ", 500

def run_api_server():
    api_app.run(host='127.0.0.1', port=5000)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    license_valid = False
    expiry_date = load_license()

    if expiry_date:
        now = datetime.datetime.now()
        if expiry_date > now:
            print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {expiry_date}")
            license_valid = True
        else:
            print("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –∫–ª—é—á!")
    else:
        print("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è!")

    if not license_valid:
        license_dialog = QDialog()
        license_dialog.setWindowTitle("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        license_dialog.setFixedSize(400, 300)
        layout = QVBoxLayout(license_dialog)
        logo_label = QLabel("üîë –í–≤–µ–¥–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á")
        logo_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(logo_label)
        key_input = QLineEdit()
        key_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á")
        layout.addWidget(key_input)
        activate_button = QPushButton("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å")
        layout.addWidget(activate_button)
        message_label = QLabel("")
        message_label.setAlignment(Qt.AlignCenter)
        message_label.setStyleSheet("color: #ff7043; font-size: 16px;")
        layout.addWidget(message_label)

        def on_activate():
            key = key_input.text().strip()
            success, expiry = validate_key(key)
            if success:
                save_license(key, expiry)
                message_label.setText(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {expiry}")
                license_dialog.accept()
            else:
                message_label.setText("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á.")

        activate_button.clicked.connect(on_activate)

        if license_dialog.exec() != QDialog.Accepted:
            print("‚ùå –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã—Ö–æ–¥...")
            sys.exit(1)

        license_valid = True

    if not license_valid:
        print("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ó–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        sys.exit(1)

    print("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    window = MainWindow()
    window.setWindowTitle("–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤ –±–æ—Ç–∞")
    window.setGeometry(100, 100, 900, 600)
    window.show()

    threading.Thread(target=run_api_server, daemon=True).start()

    sys.exit(app.exec())
