import sys
import os
import subprocess
import datetime
import uuid
import platform
import hashlib
import requests  # –î–ª—è —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
import json

from PySide6.QtCore import Qt, QTimer
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QListWidget, QStackedWidget, QPushButton, QLabel, QLineEdit, QCheckBox, QDialog
)

# –°–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–π
SERVER_URL = "http://83.220.165.162:5000"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥ ‚Äì –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è main.py.
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

if os.path.isdir(os.path.join(BASE_DIR, "src")):
    PROJECT_ROOT = BASE_DIR
else:
    PROJECT_ROOT = os.path.abspath(os.path.join(BASE_DIR, ".."))

if os.path.isdir(os.path.join(BASE_DIR, "modules")):
    MODULES_BASE = os.path.join(BASE_DIR, "modules")
elif os.path.isdir(os.path.join(BASE_DIR, "src", "modules")):
    MODULES_BASE = os.path.join(BASE_DIR, "src", "modules")
else:
    raise FileNotFoundError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ modules –≤ BASE_DIR –∏–ª–∏ BASE_DIR/src")

# –§–∞–π–ª –ª–∏—Ü–µ–Ω–∑–∏–∏
LICENSE_FILE = os.path.join(PROJECT_ROOT, "license.dat")

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é process_checker.
sys.path.append(os.path.join(MODULES_BASE, "ProcessChecker"))
import process_checker

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–æ —Å–∫—Ä–∏–ø—Ç–æ–≤ (–±–æ—Ç–æ–≤)
ANTIAFK_PATH     = os.path.join(MODULES_BASE, "AntiAfkService", "antiafk.py")
KRUTKAKOLES_PATH = os.path.join(MODULES_BASE, "AntiAfkService", "krutkakoles.py")
LOTTERY_PATH     = os.path.join(MODULES_BASE, "AntiAfkService", "lottery.py")
COOK_PATH        = os.path.join(MODULES_BASE, "CraftService", "cook.py")
WAXTA_PATH       = os.path.join(MODULES_BASE, "WorkService", "waxta.py")
PORT_PATH        = os.path.join(MODULES_BASE, "WorkService", "port.py")
STROYKA_PATH     = os.path.join(MODULES_BASE, "WorkService", "stroyka.py")
KOZLODOY_PATH    = os.path.join(MODULES_BASE, "WorkService", "kozlodoy.py")
AUTORUN_PATH     = os.path.join(MODULES_BASE, "OtherService", "autorun.py")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º sys.executable –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–æ–≥–æ –∂–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞.
PYTHON_EXEC = sys.executable

########################################################################
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
########################################################################

def get_device_id():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç MAC-–∞–¥—Ä–µ—Å –≤ –≤–∏–¥–µ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    return hex(uuid.getnode())

def get_hwid():
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (HWID) –Ω–∞ –æ—Å–Ω–æ–≤–µ:
      - MAC-–∞–¥—Ä–µ—Å–∞,
      - –ò–º–µ–Ω–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è COMPUTERNAME),
      - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ.
    """
    mac = str(uuid.getnode())
    computer_name = os.environ.get('COMPUTERNAME', 'unknown')
    processor = platform.processor()
    combined = mac + computer_name + processor
    return hashlib.sha256(combined.encode()).hexdigest()

########################################################################
# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞
########################################################################

def validate_key(key: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–ª—é—á —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä."""
    hwid = get_hwid()
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä:\n  –ö–ª—é—á: {key}\n  HWID: {hwid}")  # –í—ã–≤–æ–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

    try:
        response = requests.post(f"{SERVER_URL}/validate", json={"key": key, "hwid": hwid})
        data = response.json()
        print(f"üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {data}")  # –õ–æ–≥ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞

        if response.status_code == 200:
            expiry_date_str = data.get("expiry_date")
            expiry_date = datetime.datetime.strptime(expiry_date_str, "%Y-%m-%d %H:%M:%S")
            print(f"‚úÖ –ö–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ {expiry_date}")
            return True, expiry_date
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {data.get('message', 'Unknown error')}")
            return False, None
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return False, None


########################################################################
# –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏
########################################################################

def load_license():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –ª–∏—Ü–µ–Ω–∑–∏–∏."""
    if os.path.exists(LICENSE_FILE):
        try:
            with open(LICENSE_FILE, "r") as f:
                license_info = json.load(f)

            expiry_date_str = license_info.get("expiry_date")
            if expiry_date_str:
                return datetime.datetime.strptime(expiry_date_str, "%Y-%m-%d %H:%M:%S")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
    return None


def save_license(key, expiry_date):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏—é –ª–æ–∫–∞–ª—å–Ω–æ."""
    license_info = {
        "key": key,
        "hwid": get_hwid(),
        "expiry_date": expiry_date.strftime("%Y-%m-%d %H:%M:%S")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    }
    with open(LICENSE_FILE, "w") as f:
        json.dump(license_info, f)
    print(f"üíæ –õ–∏—Ü–µ–Ω–∑–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {expiry_date}")


########################################################################
# –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
########################################################################

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤ –±–æ—Ç–∞")
        self.setGeometry(100, 100, 900, 600)
        self.processes = {
            "antiafk": None,
            "koleso": None,
            "lottery": None,
            "cook": None,
            "waxta": None,
            "port": None,
            "stroyka": None,
            "kozlodoy": None,
            "autorun": None
        }
        self.inactive_counter = 0
        self.bots_killed_due_to_inactivity = False

        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QHBoxLayout(central_widget)

        self.menu_list = QListWidget()
        self.menu_list.setStyleSheet(
            "font-size: 18px;"
            "QListWidget::item:selected { background-color: #ff7043; border: 4px solid #ff7043; }"
        )
        self.menu_list.addItem("Anti-AFK")
        self.menu_list.addItem("–ì–æ—Ç–æ–≤–∫–∞")
        self.menu_list.addItem("–†–∞–±–æ—Ç—ã")
        self.menu_list.currentRowChanged.connect(self.switch_page)
        main_layout.addWidget(self.menu_list, 1)

        self.pages = QStackedWidget()
        self.page_antiafk = self.create_antiafk_page()
        self.page_cook = self.create_cook_page()
        self.page_work = self.create_work_page()
        self.pages.addWidget(self.page_antiafk)
        self.pages.addWidget(self.page_cook)
        self.pages.addWidget(self.page_work)
        main_layout.addWidget(self.pages, 3)
        self.switch_page(0)

        self.game_timer = QTimer(self)
        self.game_timer.timeout.connect(self.check_game_active)
        self.game_timer.start(1000)

    def switch_page(self, index):
        self.pages.setCurrentIndex(index)

    def create_antiafk_page(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        title = QLabel("Anti-AFK")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("font-size: 20px;")
        layout.addWidget(title)
        self.antiafk_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å Anti-AFK")
        self.antiafk_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.antiafk_button.clicked.connect(self.toggle_antiafk)
        layout.addWidget(self.antiafk_button)
        self.chk_koleso = QCheckBox("–ö—Ä—É—Ç–∫–∞ –∫–æ–ª–µ—Å–∞")
        self.chk_koleso.setStyleSheet("""
            QCheckBox::indicator { width: 15px; height: 15px; }
            QCheckBox::indicator:unchecked { background-color: #bdbdbd; border: 2px solid #757575; border-radius: 7px; }
            QCheckBox::indicator:checked { background-color: #ff7043; border: 2px solid #ffa726; border-radius: 7px; }
            QCheckBox { font-size: 16px; }
        """)
        self.chk_koleso.toggled.connect(self.toggle_koleso)
        layout.addWidget(self.chk_koleso)
        self.chk_lottery = QCheckBox("–õ–æ—Ç–µ—Ä–µ—è")
        self.chk_lottery.setStyleSheet("""
            QCheckBox::indicator { width: 15px; height: 15px; }
            QCheckBox::indicator:unchecked { background-color: #bdbdbd; border: 2px solid #757575; border-radius: 7px; }
            QCheckBox::indicator:checked { background-color: #ff7043; border: 2px solid #ffa726; border-radius: 7px; }
            QCheckBox { font-size: 16px; }
        """)
        self.chk_lottery.toggled.connect(self.toggle_lottery)
        layout.addWidget(self.chk_lottery)
        layout.addStretch()
        return widget

    def create_cook_page(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        title = QLabel("–ì–æ—Ç–æ–≤–∫–∞")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("font-size: 20px;")
        layout.addWidget(title)
        self.cook_error_label = QLabel("")
        self.cook_error_label.setStyleSheet("color: #ff7043; font-size: 16px;")
        layout.addWidget(self.cook_error_label)
        form_layout = QHBoxLayout()
        form_label = QLabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥:")
        form_label.setStyleSheet("font-size: 16px;")
        self.cook_input = QLineEdit()
        self.cook_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        self.cook_input.setStyleSheet("font-size: 16px; padding: 5px;")
        form_layout.addWidget(form_label)
        form_layout.addWidget(self.cook_input)
        layout.addLayout(form_layout)
        self.cook_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å")
        self.cook_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.cook_button.clicked.connect(self.toggle_cook)
        layout.addWidget(self.cook_button)
        layout.addStretch()
        return widget

    def create_work_page(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        title = QLabel("Work Service")
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("font-size: 20px;")
        layout.addWidget(title)
        self.waxta_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –®–∞—Ö—Ç–µ")
        self.waxta_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.waxta_button.clicked.connect(self.toggle_waxta)
        layout.addWidget(self.waxta_button)
        self.port_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ –ü–æ—Ä—Ç—É")
        self.port_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.port_button.clicked.connect(self.toggle_port)
        layout.addWidget(self.port_button)
        self.stroyka_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –°—Ç—Ä–æ–π–∫–µ")
        self.stroyka_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.stroyka_button.clicked.connect(self.toggle_stroyka)
        layout.addWidget(self.stroyka_button)
        self.kozlodoy_button = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ö–æ–∑–ª–æ–¥–æ–π")
        self.kozlodoy_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.kozlodoy_button.clicked.connect(self.toggle_kozlodoy)
        layout.addWidget(self.kozlodoy_button)
        self.chk_autorun = QCheckBox("Autorun")
        self.chk_autorun.setStyleSheet("""
            QCheckBox::indicator { width: 15px; height: 15px; }
            QCheckBox::indicator:unchecked { background-color: #bdbdbd; border: 2px solid #757575; border-radius: 7px; }
            QCheckBox::indicator:checked { background-color: #ff7043; border: 2px solid #ffa726; border-radius: 7px; }
            QCheckBox { font-size: 16px; }
        """)
        self.chk_autorun.toggled.connect(self.toggle_autorun)
        layout.addWidget(self.chk_autorun)
        self.work_hint_label = QLabel("")
        self.work_hint_label.setStyleSheet("font-size: 16px; color: #ff7043;")
        layout.addWidget(self.work_hint_label)
        layout.addStretch()
        return widget

    def toggle_antiafk(self):
        if self.processes["antiafk"] is None:
            self.processes["antiafk"] = subprocess.Popen(
                [PYTHON_EXEC, ANTIAFK_PATH],
                cwd=PROJECT_ROOT
            )
            self.antiafk_button.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Anti-AFK")
            self.antiafk_button.setStyleSheet("font-size: 16px; padding: 10px; background-color: #ff7043; color: white;")
        else:
            self.processes["antiafk"].terminate()
            self.processes["antiafk"].wait()
            self.processes["antiafk"] = None
            self.antiafk_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å Anti-AFK")
            self.antiafk_button.setStyleSheet("font-size: 16px; padding: 10px;")

    def toggle_koleso(self, checked):
        print("toggle_koleso toggled:", checked)
        if checked:
            wd = os.path.dirname(KRUTKAKOLES_PATH)
            try:
                proc = subprocess.Popen(
                    [PYTHON_EXEC, KRUTKAKOLES_PATH],
                    cwd=wd,
                )
                self.processes["koleso"] = proc
                print("–ö—Ä—É—Ç–∫–∞ –∫–æ–ª–µ—Å–∞ –∑–∞–ø—É—â–µ–Ω–∞, PID:", proc.pid)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ö—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–∞:", e)
        else:
            if self.processes.get("koleso") is not None:
                try:
                    self.processes["koleso"].terminate()
                    self.processes["koleso"].wait()
                    print("–ö—Ä—É—Ç–∫–∞ –∫–æ–ª–µ—Å–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                except Exception as e:
                    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ö—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–∞:", e)
                self.processes["koleso"] = None

    def toggle_lottery(self, checked):
        print("toggle_lottery toggled:", checked)
        if checked:
            wd = os.path.dirname(LOTTERY_PATH)
            try:
                proc = subprocess.Popen(
                    [PYTHON_EXEC, LOTTERY_PATH],
                    cwd=wd,
                )
                self.processes["lottery"] = proc
                print("–õ–æ—Ç–µ—Ä–µ—è –∑–∞–ø—É—â–µ–Ω–∞, PID:", proc.pid)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –õ–æ—Ç–µ—Ä–µ–∏:", e)
        else:
            if self.processes.get("lottery") is not None:
                try:
                    self.processes["lottery"].terminate()
                    self.processes["lottery"].wait()
                    print("–õ–æ—Ç–µ—Ä–µ—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                except Exception as e:
                    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –õ–æ—Ç–µ—Ä–µ–∏:", e)
                self.processes["lottery"] = None

    def toggle_cook(self):
        if self.processes["cook"] is None:
            try:
                dish_count = int(self.cook_input.text())
                self.cook_error_label.setText("")
            except ValueError:
                self.cook_error_label.setText("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
                return
            self.processes["cook"] = subprocess.Popen(
                [PYTHON_EXEC, COOK_PATH, str(dish_count)],
                cwd=PROJECT_ROOT,
            )
            self.cook_button.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
            self.cook_button.setStyleSheet("font-size: 16px; padding: 10px; background-color: #ff7043; color: white;")
        else:
            self.processes["cook"].terminate()
            self.processes["cook"].wait()
            self.processes["cook"] = None
            self.cook_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å")
            self.cook_button.setStyleSheet("font-size: 16px; padding: 10px;")

    def toggle_waxta(self):
        if self.processes["waxta"] is None:
            wd = os.path.dirname(WAXTA_PATH)
            try:
                proc = subprocess.Popen(
                    [PYTHON_EXEC, WAXTA_PATH],
                    cwd=wd,
                )
                self.processes["waxta"] = proc
                self.waxta_button.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –®–∞—Ö—Ç–µ")
                self.waxta_button.setStyleSheet("font-size: 16px; padding: 10px; background-color: #ff7043; color: white;")
                print("Waxta –∑–∞–ø—É—â–µ–Ω–∞, PID:", proc.pid)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –®–∞—Ö—Ç—ã:", e)
        else:
            try:
                self.processes["waxta"].terminate()
                self.processes["waxta"].wait()
                self.processes["waxta"] = None
                self.waxta_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –®–∞—Ö—Ç–µ")
                self.waxta_button.setStyleSheet("font-size: 16px; padding: 10px;")
                print("–®–∞—Ö—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –®–∞—Ö—Ç—ã:", e)

    def toggle_port(self):
        if self.processes["port"] is None:
            wd = os.path.dirname(PORT_PATH)
            try:
                proc = subprocess.Popen(
                    [PYTHON_EXEC, PORT_PATH],
                    cwd=wd,
                )
                self.processes["port"] = proc
                self.port_button.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ –ü–æ—Ä—Ç—É")
                self.port_button.setStyleSheet("font-size: 16px; padding: 10px; background-color: #ff7043; color: white;")
                print("Port –∑–∞–ø—É—â–µ–Ω–∞, PID:", proc.pid)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Port:", e)
        else:
            try:
                self.processes["port"].terminate()
                self.processes["port"].wait()
                self.processes["port"] = None
                self.port_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ –ü–æ—Ä—Ç—É")
                self.port_button.setStyleSheet("font-size: 16px; padding: 10px;")
                print("Port –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Port:", e)

    def toggle_stroyka(self):
        if self.processes["stroyka"] is None:
            wd = os.path.dirname(STROYKA_PATH)
            try:
                proc = subprocess.Popen(
                    [PYTHON_EXEC, STROYKA_PATH],
                    cwd=wd,
                )
                self.processes["stroyka"] = proc
                self.stroyka_button.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –°—Ç—Ä–æ–π–∫–µ")
                self.stroyka_button.setStyleSheet("font-size: 16px; padding: 10px; background-color: #ff7043; color: white;")
                print("–°—Ç—Ä–æ–π–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞, PID:", proc.pid)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –°—Ç—Ä–æ–π–∫–∏:", e)
        else:
            try:
                self.processes["stroyka"].terminate()
                self.processes["stroyka"].wait()
                self.processes["stroyka"] = None
                self.stroyka_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –°—Ç—Ä–æ–π–∫–µ")
                self.stroyka_button.setStyleSheet("font-size: 16px; padding: 10px;")
                print("–°—Ç—Ä–æ–π–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –°—Ç—Ä–æ–π–∫–∏:", e)

    def toggle_kozlodoy(self):
        if self.processes["kozlodoy"] is None:
            wd = os.path.dirname(KOZLODOY_PATH)
            try:
                proc = subprocess.Popen(
                    [PYTHON_EXEC, KOZLODOY_PATH],
                    cwd=wd,
                )
                self.processes["kozlodoy"] = proc
                self.kozlodoy_button.setText("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ö–æ–∑–ª–æ–¥–æ–π")
                self.kozlodoy_button.setStyleSheet("font-size: 16px; padding: 10px; background-color: #ff7043; color: white;")
                print("–ö–æ–∑–ª–æ–¥–æ–π –∑–∞–ø—É—â–µ–Ω, PID:", proc.pid)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ö–æ–∑–ª–æ–¥–æ—è:", e)
        else:
            try:
                self.processes["kozlodoy"].terminate()
                self.processes["kozlodoy"].wait()
                self.processes["kozlodoy"] = None
                self.kozlodoy_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ö–æ–∑–ª–æ–¥–æ–π")
                self.kozlodoy_button.setStyleSheet("font-size: 16px; padding: 10px;")
                print("–ö–æ–∑–ª–æ–¥–æ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ö–æ–∑–ª–æ–¥–æ—è:", e)

    def toggle_autorun(self, checked):
        print("toggle_autorun toggled:", checked)
        if checked:
            wd = os.path.dirname(AUTORUN_PATH)
            try:
                proc = subprocess.Popen(
                    [PYTHON_EXEC, AUTORUN_PATH],
                    cwd=wd,
                )
                self.processes["autorun"] = proc
                self.work_hint_label.setText("–ö–ª–∞–≤–∏—à–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Autorun - +/=")
                print("Autorun –∑–∞–ø—É—â–µ–Ω, PID:", proc.pid)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Autorun:", e)
        else:
            if self.processes.get("autorun") is not None:
                try:
                    self.processes["autorun"].terminate()
                    self.processes["autorun"].wait()
                    print("Autorun –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                except Exception as e:
                    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Autorun:", e)
                self.processes["autorun"] = None
                self.work_hint_label.setText("")

    def check_game_active(self):
        if process_checker.is_game_active():
            self.inactive_counter = 0
            self.bots_killed_due_to_inactivity = False
        else:
            self.inactive_counter += 1
            print(f"–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ —É–∂–µ {self.inactive_counter} —Å–µ–∫—É–Ω–¥.")
            if self.inactive_counter >= 180 and not self.bots_killed_due_to_inactivity:
                print("–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ 3 –º–∏–Ω—É—Ç—ã. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤.")
                self.kill_all_bots()
                self.bots_killed_due_to_inactivity = True

    def kill_all_bots(self):
        for key in self.processes:
            proc = self.processes[key]
            if proc is not None:
                try:
                    proc.terminate()
                    proc.wait()
                    print(f"{key} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ {key}: {e}")
                self.processes[key] = None
        self.antiafk_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å Anti-AFK")
        self.antiafk_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.cook_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å")
        self.cook_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.waxta_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –®–∞—Ö—Ç–µ")
        self.waxta_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.port_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ –ü–æ—Ä—Ç—É")
        self.port_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.stroyka_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –°—Ç—Ä–æ–π–∫–µ")
        self.stroyka_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.kozlodoy_button.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ö–æ–∑–ª–æ–¥–æ–π")
        self.kozlodoy_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.chk_koleso.setChecked(False)
        self.chk_lottery.setChecked(False)
        self.chk_autorun.setChecked(False)
        self.work_hint_label.setText("")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    license_valid = False

    # 1Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é
    expiry_date = load_license()

    # 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if expiry_date:
        now = datetime.datetime.now()
        if expiry_date > now:
            print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {expiry_date}")
            license_valid = True
        else:
            print("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –∫–ª—é—á!")
    else:
        print("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è!")

    # 3Ô∏è‚É£ –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–ª—é—á —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not license_valid:
        license_dialog = QDialog()
        license_dialog.setWindowTitle("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        license_dialog.setFixedSize(400, 300)

        layout = QVBoxLayout(license_dialog)
        logo_label = QLabel("üîë –í–≤–µ–¥–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á")
        logo_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(logo_label)

        key_input = QLineEdit()
        key_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á")
        layout.addWidget(key_input)

        activate_button = QPushButton("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å")
        layout.addWidget(activate_button)

        message_label = QLabel("")
        message_label.setAlignment(Qt.AlignCenter)
        message_label.setStyleSheet("color: #ff7043; font-size: 16px;")
        layout.addWidget(message_label)

        def on_activate():
            key = key_input.text().strip()
            success, expiry = validate_key(key)
            if success:
                save_license(key, expiry)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
                message_label.setText(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {expiry}")
                license_dialog.accept()
            else:
                message_label.setText("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á.")

        activate_button.clicked.connect(on_activate)

        if license_dialog.exec() != QDialog.Accepted:
            print("‚ùå –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã—Ö–æ–¥...")
            sys.exit(1)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —Ä–∞–∑ –ª–∏—Ü–µ–Ω–∑–∏—è —Ç–µ–ø–µ—Ä—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞
        license_valid = True

    # 4Ô∏è‚É£ –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if not license_valid:
        print("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ó–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        sys.exit(1)

    print("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    window = MainWindow()
    window.setWindowTitle("–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤ –±–æ—Ç–∞")
    window.setGeometry(100, 100, 900, 600)
    window.show()

    sys.exit(app.exec())


